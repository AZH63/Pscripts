Import-module Az.resources
Install-Module -Name PowerShellGet -AllowPrerelease
Install-Module -Name Az.ManagedServiceIdentity -AllowPrerelease
$sub = Get-AzSubscription -ErrorAction SilentlyContinue
if(-not($sub))
{
    Connect-AzAccount
}
Write-host "go grab the subscription id : https://portal.azure.com/#view/Microsoft_AAD_IAM/TenantProperties.ReactView"
$subscriptionID= Read-Host

New-AzResourceGroup -Name "IT-Automation" 
New-AzAutomationAccount -Name "ITAutomation" -Location "East US" -ResourceGroupName "IT-Automation"
New-AzUserAssignedIdentity -ResourceGroupName "IT-Automation" -Name "AzureCreds" "East US"
Get-AzUserAssignedIdentity -ResourceGroupName "IT-Automation"
Set-AzAutomationAccount -ResourceGroupName "It-Automation" -Name "ITAutomation" -AssignUserIdentity "/subscriptions/$subscriptionID/resourcegroups/It-Automation/providers/Microsoft.ManagedIdentity/userAssignedIdentities/AzureCreds"
      
# Connect to Microsoft Graph
Connect-MgGraph -Scopes "Application.Read.All","AppRoleAssignment.ReadWrite.All,RoleManagement.ReadWrite.Directory"


$managedIdentityId = Get-MgServicePrincipal -Filter "displayName eq 'AzureCreds'" | Select -ExpandProperty Id
$graphApp = Get-MgServicePrincipal -Filter "AppId eq '00000003-0000-0000-c000-000000000000'"
$graphScopes = @(
  # 'UserAuthenticationMethod.Read.All',
  'Group.ReadWrite.All',
  'Directory.ReadWrite.All'
  'User.ReadWrite.All' 
  # 'RoleManagement.ReadWrite.Directory'
  'LicenseAssignment.Read.All' 
  'Directory.AccessAsUser.All'
  
  'GroupMember.ReadWrite.All'
)
ForEach($scope in $graphScopes){
  
  $appRole = $graphApp.AppRoles | Where-Object {$_.Value -eq $scope}
  if ($approle -ne $null) 
  {
  New-MgServicePrincipalAppRoleAssignment -PrincipalId $managedIdentityId -ServicePrincipalId $managedIdentityId -ResourceId $($graphApp.Id) -AppRoleId $($appRole.Id)
  }
  else {
    Write-Host "do $-graphappp.AppRoles | Select Value "
  }
}
$exoApp = Get-MgServicePrincipal -Filter "AppId eq '00000002-0000-0ff1-ce00-000000000000'" #exo app idW


$appRole = $exoApp.AppRoles | Where-Object {$_.DisplayName -eq "Manage Exchange As Application"}
$AppRoleAssignment = @{
  "PrincipalId" = $managedIdentityId
  "ServicePrincipalId" = $managedIdentityId
  "ResourceId" = $exoApp.Id
  "AppRoleId" = $appRole.Id
}
New-MgServicePrincipalAppRoleAssignment @AppRoleAssignment


Connect-ExchangeOnline -ManagedIdentity -Organization seriltoumagmail.onmicrosoft.com
# thank u: https://lazyadmin.nl/office-365/how-to-use-azure-managed-identity/
# enable Groups Administrator from template
Enable-AzureADDirectoryRole -RoleTemplateId "fdd7a751-b60b-444a-984c-02652fe8fa1c"
Add-AzureADDirectoryRoleMember -ObjectId (Get-AzureADDirectoryRole | where-object {$_.DisplayName -eq "Groups Administrator"}).Objectid -RefObjectId $servicePrincipalObjectId

# enable User Administrator from template
Enable-AzureADDirectoryRole -RoleTemplateId "fe930be7-5e62-47db-91af-98c3a49a38b1"
Add-AzureADDirectoryRoleMember -ObjectId (Get-AzureADDirectoryRole | where-object {$_.DisplayName -eq "User Administrator"}).Objectid -RefObjectId $servicePrincipalObjectId

Enable-AzureADDirectoryRole -RoleTemplateID "29232cdf-9323-42fd-ade2-1d097af3e4de"
Add-AzureADDirectoryRoleMember -ObjectId (Get-AzureADDirectoryRole | where-object {$_.DisplayName -eq "Exchange Administrator"}).Objectid -RefObjectId $managedIdentityId






