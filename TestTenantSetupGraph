Function Create-Groups {

   for ( $i=1;$i -le 3;$i++) {
   
   $params= @{
        description = "test group"
        DisplayName = "Test 365 Group $i"
        groupTypes=@("Unified")
        mailEnabled = $true
        mailNickName= "Test365-$i"
        securityEnabled= $false   
   
    }
    $paramsSec=@{
      description= "test secgroup"
      DisplayName="TestSec$i"
      mailEnabled = $false
      groupTypes=@()
      mailNickName="TestSec$i"
      securityEnabled= $true
    }
    New-MgGroup -BodyParameter $params
    New-MgGroup -BodyParameter $paramsSec 
   
New-DynamicDistributionGroup -name “All_Employees” -RecipientFilter “((((RecipientType -eq 'UserMailbox') -and (-not(CustomAttribute1 -eq 'Disabled')))) -and (-not(Name -like 'SystemMailbox{')) -and (-not(Name -like 'CAS_{')) -and (-not(RecipientTypeDetailsValue -eq 'MailboxPlan')) -and (-not(RecipientTypeDetailsValue -eq 'DiscoveryMailbox')) -and (-not(RecipientTypeDetailsValue -eq 'PublicFolderMailbox')) -and (-not(RecipientTypeDetailsValue -eq 'ArbitrationMailbox')) -and (-not(RecipientTypeDetailsValue -eq 'AuditLogMailbox')) -and (-not(RecipientTypeDetailsValue -eq 'AuxAuditLogMailbox')) -and (-not(RecipientTypeDetailsValue -eq 'SupervisoryReviewPolicyMailbox')))”
    write-host "$i"
}
   

    }

Try {
Connect-MgGraph -Scopes "Directory.ReadWrite.All"
Get-MgContext
Connect-ExchangeOnline
}
catch {
Install-Module Microsoft.Graph.Authentication -Confirm:$false
Install-Module Microsoft.Graph.Users -Confirm:$false
Install-Module Microsoft.Graph.Groups -Confirm:$false
Import-Module Microsoft.Graph.Authentication 
Import-Module Microsoft.Graph.Users 
Import-Module Microsoft.Graph.Groups
}

Function Get-PersonalData{

    $request=(Invoke-RestMethod -uri "https://dummyjson.com/users" -Method Get) 
    write-verbose "building table"
    $users=$request.users | % {[PSCustomObject]@{
        displayName = "$($_.firstname)"+ " "+"$($_.LastName)"
    
        JobTitle= $_.Company.title
        Department= $_.Company.Department
        OfficeLocation= $_.address.city
        givenName= $_.firstname
        surname= $_.lastname
        MailNickname="$($_.firstname[0])$($_.lastname)"
    
    }
    }
    $users
    
    
    }



Function Create-Users {
    [CmdletBinding(DefaultParameterSetName= 'Default')]
param (

    [Parameter(HelpMessage="headers: first name, lastname",ParameterSetName="csv")]
    [switch]$csv,
    [Parameter(ParameterSetName="csv",Mandatory=$true)]
    $inputPath,
    [string]$tenant="1x4bs0.onmicrosoft",
    [validateRange(1,25)]
    [int]$number= 25
    
)



if($PSBoundParameters.ContainsKey("csv")) {
$source=Import-Csv -path $inputPath
$number=$source.Count
$range= $source[0..$number]
}
else {
    $users=Get-PersonalData

    
    $range= $users[0..$number] 
}

$range| % {
    $params=@{
        
        displayName= $_.displayName
        mailNickName=$_.mailNickName
        JobTitle= $_.JobTitle
        userPrincipalName = "$($_.mailNickName)@$tenant.com"
        PasswordProfile= @{
            forceChangePasswordNextSignIn = $true  
        }
        department=$_.Department
        givenName= $_.givenName
        surname= $_.surname
        employeeID= (1..2000 | get-random)
       

    }
    New-MgUser -BodyParameter $params


}




}

Create-Users



$tenant=read-host "enter tenant name (after the @ including the TLD)"
[int]$UserCount= read-host "how many users?"

[int]$startingpt= Read-Host "what number to start from?"
 $startingpt..$UserCount| ForEach-Object { $params= @{
 accountEnabled= $true
 displayName= "user$_"
 mailNickName= "user$_"
 userPrincipalName = "user$_@$tenant"
PasswordProfile= @{
    forceChangePasswordNextSignIn = $true   
}
}
New-MgUser -BodyParameter $params
Update-MgBetaUser -userId "user$_@$tenant"   -EmployeeId $_
}


#find the midpt
$midpoint= [math]::Ceiling($EmployeesAdded.Count /2)
# split array in half using midpoint
$enabledUsers=$EmployeesAdded[0..($midpoint -1)]
$disabledUsers=$EmployeesAdded[$midpoint..($EmployeesAdded.Count - 1)]
$disabledUsers | ForEach-Object {
Write-Host " Disabling user$_@$tenant"
Update-MgBetaUser -UserId "user$_@$tenant" -AccountEnabled $false

}

Create-Groups
#license
#create test desk pick a user to assign
Get-Random -InputObject ((Get-MgUser).Id)

$params=@{
    description = "Group for Helpdesk privs"
        DisplayName = "HelpDesk"
        mailEnabled = $false
        mailNickName= "HelpDesk"
        securityEnabled= $true 
        isAssignableToRole = $true
}
New-MgGroup -BodyParameter $params




